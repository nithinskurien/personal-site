---
import { getCollection } from "astro:content";

const projects = (await getCollection("projects")).sort(
  (a, b) => a.data.priority.valueOf() - b.data.priority.valueOf(),
);
---

<section id="projects" class="section projects">
  <div class="container container-border">
    <h2 class="section-title gradient-text">Featured Projects</h2>
    <div class="projects-grid">
      {
        projects.map((project) => (
          <div class="project-card">
            <div class="project-content">
              <h3>{project.data.title}</h3>
              <p>{project.data.description}</p>
              <a href={`/projects/${project.id}`} class="project-link">
                View case study
              </a>
            </div>
            <div class="project-visual">
              <div class="project-image">
                <div
                  class="gradient-bg"
                  style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);"
                />
              </div>
              <div class="project-stats">
                {project.data.stats.map((stat) => (
                  <div class="stat">
                    <span class="stat-number">{stat.value}</span>
                    <span class="stat-label">{stat.label}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .projects {
    background: rgba(0, 0, 0, 0.3);
  }

  .projects-grid {
    display: flex;
    flex-direction: column;
    height: min-content;
    max-width: 1000px;
    gap: 2rem;
    margin: 0 auto;
    scroll-margin-top: 20px;
    transform: perspective(1200px);
  }

  .project-card {
    position: sticky;
    top: 20vh;
    padding: 4rem;
    margin: 1rem;
    background: rgb(30, 30, 30);
    min-height: 500px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    will-change: transform, opacity;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }

  .project-content h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: white;
  }

  .project-content p {
    color: rgba(255, 255, 255, 0.7);
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .project-link {
    color: #667eea;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
  }

  .project-link:hover {
    color: #764ba2;
  }

  .project-visual {
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    gap: 1rem;
  }

  .project-image {
    display: block;
    height: 120px;
    border-radius: 12px;
    overflow: hidden;
    object-fit: cover;
  }

  .gradient-bg {
    width: 100%;
    height: 100%;
    opacity: 0.8;
  }

  .project-stats {
    display: flex;
    gap: 2rem;
    justify-content: center;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
  }

  .stat-label {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.6);
  }

  @media (max-width: 768px) {
    .project-card {
      grid-template-columns: 1fr;
      text-align: center;
    }
  }
</style>

<script type="module">
  const cards = document.querySelectorAll(".project-card");

  window.addEventListener("scroll", () => {
    const scrollTop = window.scrollY;
    const windowHeight = window.innerHeight;

    cards.forEach((card, index) => {
      const triggerPoint = index * windowHeight;
      const nextTrigger = (index + 1) * card.offsetHeight;
      const scaleFactor = 35;
      const top = 24 * index;
      const offset = (scrollTop - triggerPoint) / windowHeight;
      card.style.top = `calc(20vh + ${top}px)`;
      let scale = 0.9;

      if (scrollTop >= triggerPoint && scrollTop < nextTrigger) {
        scale = 1;
      } else {
        scale = 1 - Math.min(Math.max(offset / scaleFactor, 0), 0.1);
        card.classList.remove("active");
      }
      card.style.transform = `scale(${scale})`;
    });
  });
</script>
