---
const { value, label } = Astro.props;
const match = value.match(/^([\d,.]+)\s*(\D*)$/);
const targetNumber = match ? parseInt(match[1].replace(/,/g, "")) : 0;
const unit = match ? match[2] : "";
---

<div class="stat-badge" data-target={targetNumber}>
  <div>
    <span class="countup">0</span>
    <span class="unit">{unit}</span>
  </div>
  <div class="label">{label}</div>
</div>

<style>
  .stat-badge {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-size: 3rem;
    font-weight: normal;
  }

  .countup {
    display: inline-block;
  }

  .unit {
    color: #888;
    font-weight: normal;
  }

  .label {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.6);
  }
</style>

<script type="module">
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const el = entry.target;
          const target = +el.dataset.target;
          const countEl = el.querySelector(".countup");
          const duration = 1200;
          const startTime = performance.now();

          function animate(now) {
            const progress = Math.min((now - startTime) / duration, 1);
            const value = Math.floor(progress * target);
            countEl.textContent = value.toLocaleString();
            if (progress < 1) {
              requestAnimationFrame(animate);
            } else {
              countEl.textContent = target.toLocaleString();
            }
          }

          requestAnimationFrame(animate);
          observer.unobserve(el);
        }
      });
    },
    { threshold: 0.5 },
  );

  document
    .querySelectorAll(".stat-badge")
    .forEach((el) => observer.observe(el));
</script>
