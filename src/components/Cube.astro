---
import type { ImageMetadata } from "astro";
import robot from "../assets/icons/Robot.png";
import tele from "../assets/icons/Tele.png";
import health from "../assets/icons/Health.png";
import car from "../assets/icons/Car.png";
import play from "../assets/icons/Play.svg";
import stop from "../assets/icons/Stop.svg";
import values from "../content/values.json";
import story from "../content/story.json";

const iconMap: Record<string, string> = {};

// Load all icons (lazy importers)
const importers = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/icons/*.{png,svg}",
  { eager: false },
);
// Preload all modules upfront using Promise.all with top-level await
const modules = await Promise.all(
  values.map((value) => {
    const key = `/src/assets/icons/${value.icon}.svg`;
    const importer = importers[key];
    if (!importer) {
      console.warn(`Icon not found for ${value.icon}, using fallback.`);
      return null;
    }
    return importer();
  }),
);
// Map company icons to default image metadata
modules.forEach((mod, i) => {
  if (mod) {
    iconMap[values[i].icon] = mod.default.src;
  }
});
---

<section id="home" class="hero">
  <div class="container">
    <div class="cube-container">
      <div class="cube">
        <div class="face front">
          <div class="quote-content" id="quoteContent">
            <blockquote class="quote-text" id="quoteText">
              Work is a reflection of self, make it worth showing.
            </blockquote>
            <div class="quote-attribution">
              <cite class="quote-author" id="quoteAuthor">
                職人気質 (Shokunin Kishitsu)
              </cite>
              <img
                class="quote-origin"
                id="quoteIcon"
                src={iconMap[values[0].icon]}
                alt="JP"
                loading="lazy"
              />
            </div>
          </div>
        </div>
        <div class="face right">
          <h2>Hi, I'm Nithin an engineer who loves</h2>
          <h2>_______</h2>
          <div id="valueHeaders">
            <h3 class="highlighted-value" id="craftsmanship">Craftsmanship</h3>
            <h3 id="responsibility">Responsibility</h3>
            <h3 id="aspiration">Aspiration</h3>
            <h3 id="wisdom">Wisdom</h3>
          </div>
        </div>
        <div class="face top">
          <h2>To Build cool stuff!</h2>
          <h2 class="title-fill" id="titleProgress">To Build cool stuff!</h2>
          <img
            class="play-icon"
            id="playButton"
            src={play.src}
            alt="play"
            loading="lazy"
          />
          <img class="robot-icon" src={robot.src} alt="robot" loading="lazy" />
          <img class="tele-icon" src={tele.src} alt="tele" loading="lazy" />
          <img
            class="health-icon"
            src={health.src}
            alt="health"
            loading="lazy"
          />
          <img class="car-icon" src={car.src} alt="car" loading="lazy" />
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 8rem 0 4rem;
    background: rgba(0, 0, 0, 0.3);
  }

  .cube-container {
    position: relative;
    min-height: 400px;
    perspective: 3000px;
    perspective-origin: center center;
    transform: scale(1.25);
  }

  .cube {
    position: relative;
    transform-style: preserve-3d;
    transform: rotateX(-50deg) rotateY(35deg) rotateZ(20deg) translateX(-180px);
    transition: transform 0.6s ease;
  }

  .face {
    position: absolute;
    width: 500px;
    height: 500px;
    display: flex;
    flex-direction: column;
    font-weight: 900;
    text-transform: uppercase;
    letter-spacing: 2px;
    color: white;
    text-align: center;
    line-height: 0.9;
  }

  .front {
    /*background: #333;*/
    transform: translateZ(240px);
    text-align: left;
    color: #898989;
  }

  .right {
    /*background: #555;*/
    padding: 10px;
    transform: rotateY(-90deg) rotateZ(-90deg) translateZ(250px);
    justify-content: right;
    text-align: right;
    color: #d2d2d2;
  }

  .top {
    /*background: #777;*/
    padding: 10px;
    transform: rotateX(90deg) translateZ(250px);
    justify-content: left;
    text-align: left;
    color: #f5f5f5;
  }

  .top h2 {
    font-size: 8rem;
  }

  .title-fill {
    position: absolute;
    color: yellow;
    mask-image: linear-gradient(to right, black 0%, transparent 100%);
    -webkit-mask-image: linear-gradient(to right, black 0%, transparent 100%);
    mask-repeat: no-repeat;
    -webkit-mask-repeat: no-repeat;
    mask-size: 0% 100%;
    -webkit-mask-size: 0% 100%;
    transition:
      mask-size 0.2s linear,
      -webkit-mask-size 0.2s linear;
  }

  .right h3 {
    font-size: 2.5rem;
    line-height: 1.5;
    transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }

  .highlighted-value {
    color: #fcce00ff;
  }

  .right h2 {
    font-size: 2.5rem;
    line-height: 1.25;
  }

  .face h2 {
    margin: 0;
    margin-bottom: 8px;
  }

  .face p {
    margin: 0;
    font-size: 16px;
    opacity: 0.8;
    font-weight: 700;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
  }

  .quote-content {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .quote-text {
    font-size: 1.8rem;
    line-height: 1.2;
    margin: 0 2rem 2rem 0;
    font-weight: 500;
    letter-spacing: -0.01em;
  }

  .quote-attribution {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: center;
    gap: 0.5rem;
  }

  .quote-author {
    font-size: 1.1rem;
    font-weight: 600;
    font-style: normal;
  }

  .quote-origin {
    height: 20px;
    align-self: center;
    opacity: 0.7;
  }

  .story-icons {
    position: absolute;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    z-index: 2;
  }

  .play-icon {
    position: absolute;
    width: 65px;
    top: 7.1%;
    left: 22.4%;
  }

  .robot-icon {
    position: absolute;
    top: 21%;
    left: 0%;
    width: 180px;
    rotate: 45deg;
    opacity: 0;
  }

  .tele-icon {
    position: absolute;
    top: 20%;
    left: 50%;
    opacity: 0;
  }

  .health-icon {
    position: absolute;
    top: 20%;
    left: 70%;
    width: 100px;
    rotate: 19deg;
    opacity: 0;
  }

  .car-icon {
    position: absolute;
    top: 18%;
    left: 80%;
    width: 120px;
    rotate: 18deg;
    opacity: 0;
  }

  /* Responsive adjustments */
  @media (max-width: 1200px) {
    .cube-container {
      transform: scale(0.8);
    }
  }

  @media (max-width: 768px) {
    .cube-container {
      transform: scale(0.6);
    }
  }

  @media (max-width: 400px) {
    .cube-container {
      transform: scale(0.3);
    }
  }
</style>

<script type="module" define:vars={{ story, values, iconMap }}>
  const playButton = document.getElementById("playButton");
  const dynamicText = document.getElementById("quoteText");
  const quoteAuthor = document.getElementById("quoteAuthor");
  const quoteIcon = document.getElementById("quoteIcon");
  const imageArea = document.getElementById("image-area");
  const fill = document.getElementById("titleProgress");
  const valueHeaders = document.getElementById("valueHeaders");
  const headerMap = new Map();
  valueHeaders.querySelectorAll("h3").forEach((value) => {
    headerMap.set(value.id.trim(), value);
  });

  let quoteIndex = 0;
  let storyIndex = 0;
  let quoteInterval = null;
  let playing = false;
  let previousQuoteIndex = null;

  function resetUI() {
    // Reset title fill
    fill.style.backgroundSize = "0% 100%";
    // Clear text and images
    dynamicText.textContent = "";
    //imageArea.innerHTML = "";
  }

  function loopQuotes() {
    quoteInterval = setInterval(() => {
      // Reset previous h2 color
      headerMap.forEach((value) => {
        value.classList.remove("highlighted-value");
      });

      const value = values[quoteIndex];
      dynamicText.textContent = value.quote;
      quoteAuthor.textContent = value.philosophy;
      quoteIcon.src = iconMap[value.icon];
      headerMap.get(value.id).classList.add("highlighted-value");

      previousQuoteIndex = quoteIndex;
      quoteIndex = (quoteIndex + 1) % values.length;
    }, 4000);
  }

  function updateTitleProgress(percent) {
    const clamped = Math.max(0, Math.min(100, percent));
    fill.style.maskSize = `${clamped}% 100%`;
    fill.style.webkitMaskSize = `${clamped}% 100%`;
  }

  async function playStory() {
    clearInterval(quoteInterval);
    resetUI();
    playButton.disabled = true;

    const totalDuration = story.reduce((acc, s) => acc + s.delay, 0);
    let elapsed = 0;

    for (const segment of story) {
      dynamicText.textContent = segment.text;

      const steps = 30;
      for (let i = 0; i < steps; i++) {
        const progress =
          (elapsed + (i / steps) * segment.delay) / totalDuration;
        updateTitleProgress(progress * 100);
        await new Promise((res) => setTimeout(res, segment.delay / steps));
      }

      elapsed += segment.delay;
    }

    playButton.disabled = false;
  }

  playButton.addEventListener("click", () => {
    clearInterval(quoteInterval);
    resetUI();
    if (playing == true) {
      playing = false;
      loopQuotes();
    } else {
      playing = true;
      playStory();
    }
  });

  // Start looping quotes initially
  loopQuotes();
</script>
