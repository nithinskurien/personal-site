---
import type { ImageMetadata } from "astro";
import robot from "../assets/icons/Robot.png";
import tele from "../assets/icons/Tele.png";
import health from "../assets/icons/Health.png";
import car from "../assets/icons/Car.png";
import play from "../assets/icons/Play.svg";
import stop from "../assets/icons/Stop.svg";
import values from "../content/values.json";
import story from "../content/story.json";

const iconMap: Record<string, string> = {};

// Load all icons (lazy importers)
const importers = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/icons/*.{png,svg}",
  { eager: false },
);
// Preload all modules upfront using Promise.all with top-level await
const modules = await Promise.all(
  values.map((value) => {
    const key = `/src/assets/icons/${value.icon}.svg`;
    const importer = importers[key];
    if (!importer) {
      console.warn(`Icon not found for ${value.icon}, using fallback.`);
      return null;
    }
    return importer();
  }),
);
// Map company icons to default image metadata
modules.forEach((mod, i) => {
  if (mod) {
    iconMap[values[i].icon] = mod.default.src;
  }
});
---

<section id="home" class="hero">
  <div class="container">
    <div class="cube-container">
      <div class="cube" id="cubeBox">
        <div class="face front">
          <div class="quote-content" id="quoteContent">
            <blockquote class="quote-text" id="quoteText">
              Work is a reflection of self, make it worth showing.
            </blockquote>
            <div class="quote-attribution">
              <cite class="quote-author" id="quoteAuthor">
                職人気質 (Shokunin Kishitsu)
              </cite>
              <img
                class="quote-origin"
                id="quoteIcon"
                src={iconMap[values[0].icon]}
                alt="JP"
                loading="lazy"
              />
            </div>
          </div>
        </div>
        <div class="face right">
          <h2>Hi, I'm Nithin an engineer who loves</h2>
          <h2>_______</h2>
          <div id="valueHeaders">
            <h3 class="highlighted-value" id="craftsmanship">Craftsmanship</h3>
            <h3 id="responsibility">Responsibility</h3>
            <h3 id="aspiration">Aspiration</h3>
            <h3 id="wisdom">Wisdom</h3>
          </div>
        </div>
        <div class="face top">
          <h2 class="flush-fill" id="titleProgress">
            <span class="title-fill">To</span>
            <span class="title-fill">Build</span>
            <span class="title-fill">cool</span>
            <span class="title-fill">stuff</span>
            <span class="title-fill flush-handle" id="flushHandle">!</span>
          </h2>
          <img
            class="play-icon"
            id="playButton"
            src={play.src}
            alt="play"
            loading="lazy"
          />
          <img class="robot-icon" src={robot.src} alt="robot" loading="lazy" />
          <img class="tele-icon" src={tele.src} alt="tele" loading="lazy" />
          <img
            class="health-icon"
            src={health.src}
            alt="health"
            loading="lazy"
          />
          <img class="car-icon" src={car.src} alt="car" loading="lazy" />
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 8rem 0 4rem;
    background: rgba(0, 0, 0, 0.3);
  }

  .cube-container {
    position: relative;
    min-height: 400px;
    perspective: 3000px;
    perspective-origin: center center;
    transform: scale(1.25);
  }

  .cube {
    position: relative;
    transform-style: preserve-3d;
    transform: rotateX(-50deg) rotateY(35deg) rotateZ(20deg) translateX(-180px);
    transition: transform 1s cubic-bezier(0.17, 0.67, 0.83, 0.67);
  }

  .cube-flushed {
    transform: rotateX(-60deg) rotateY(40deg) rotateZ(20deg) translateX(-180px);
  }

  .face {
    position: absolute;
    width: 500px;
    height: 500px;
    display: flex;
    flex-direction: column;
    font-weight: 900;
    text-transform: uppercase;
    letter-spacing: 2px;
    color: white;
    text-align: center;
    line-height: 0.9;
  }

  .front {
    /*background: #333;*/
    transform: translateZ(240px);
    text-align: left;
    color: #898989;
  }

  .right {
    /*background: #555;*/
    padding: 10px;
    transform: rotateY(-90deg) rotateZ(-90deg) translateZ(250px);
    justify-content: right;
    text-align: right;
    color: #d2d2d2;
  }

  .top {
    /*background: #777;*/
    padding: 10px;
    transform: rotateX(90deg) translateZ(250px);
    justify-content: left;
    text-align: left;
    color: #f5f5f5;
  }

  .top span {
    font-size: 8rem;
  }

  .flush-fill {
    background: linear-gradient(45deg, yellow 100%, white 100%);
    background-size: 100% 100%;
    background-repeat: no-repeat;
    background-clip: text;
    color: #f5f5f5;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    transition: background 0.3s linear;
  }

  .title-fill {
    background: linear-gradient(to right, yellow 0%, white 0%);
    background-size: 100% 100%;
    background-repeat: no-repeat;
    background-clip: text;
    color: #f5f5f5;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    transition: background 0.3s linear;
  }

  .flush-handle {
    display: inline-block;
    transform-origin: center bottom;
  }

  .right h3 {
    font-size: 2.5rem;
    line-height: 1.5;
    transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }

  .highlighted-value {
    color: var(--color-accent);
  }

  .right h2 {
    font-size: 2.5rem;
    line-height: 1.25;
  }

  .face h2 {
    margin: 0;
    margin-bottom: 8px;
  }

  .face p {
    margin: 0;
    font-size: 0;
    opacity: 0.8;
    font-weight: 700;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
  }

  .quote-content {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .quote-text {
    font-size: 1.8rem;
    line-height: 1.2;
    margin: 0 2rem 2rem 0;
    font-weight: 500;
    letter-spacing: -0.01em;
  }

  .quote-attribution {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: center;
    gap: 0.5rem;
  }

  .quote-author {
    font-size: 1.1rem;
    font-weight: 600;
    font-style: normal;
  }

  .quote-origin {
    height: 20px;
    align-self: center;
    opacity: 0.7;
  }

  .story-icons {
    position: absolute;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    z-index: 2;
  }

  .play-icon {
    position: absolute;
    width: 65px;
    top: 7.1%;
    left: 22.4%;
  }

  .robot-icon {
    position: absolute;
    top: 21%;
    left: 0%;
    width: 180px;
    rotate: 45deg;
    opacity: 0;
  }

  .tele-icon {
    position: absolute;
    top: 20%;
    left: 50%;
    opacity: 0;
  }

  .health-icon {
    position: absolute;
    top: 20%;
    left: 70%;
    width: 100px;
    rotate: 19deg;
    opacity: 0;
  }

  .car-icon {
    position: absolute;
    top: 18%;
    left: 80%;
    width: 120px;
    rotate: 18deg;
    opacity: 0;
  }

  .shake-animation {
    animation: springyShake 1.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  @keyframes springyShake {
    0% {
      transform: rotate(0deg);
    }
    15% {
      transform: rotate(10deg);
    }
    50% {
      transform: rotate(15deg);
    }
    75% {
      transform: rotate(0deg);
    }
    90% {
      transform: rotate(-10deg);
    }
    100% {
      transform: rotate(0deg);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 1200px) {
    .cube-container {
      transform: scale(0.8);
    }
  }

  @media (max-width: 768px) {
    .cube-container {
      transform: scale(0.6);
    }
  }

  @media (max-width: 400px) {
    .cube-container {
      transform: scale(0.3);
    }
  }
</style>

<script type="module" define:vars={{ story, values, iconMap }}>
  const playButton = document.getElementById("playButton");
  const dynamicText = document.getElementById("quoteText");
  const flushHandle = document.getElementById("flushHandle");
  const cubeBox = document.getElementById("cubeBox");
  const title = document.getElementById("titleProgress");
  const lines = Array.from(document.querySelectorAll(".title-fill"));
  const quoteAuthor = document.getElementById("quoteAuthor");
  const quoteIcon = document.getElementById("quoteIcon");
  const fill = document.getElementById("titleProgress");
  const valueHeaders = document.getElementById("valueHeaders");
  const headerMap = new Map();
  valueHeaders.querySelectorAll("h3").forEach((value) => {
    headerMap.set(value.id.trim(), value);
  });

  let quoteIndex = 0;
  let storyIndex = 0;
  let quoteInterval = null;
  let playing = false;
  let previousQuoteIndex = null;

  function resetUI() {
    dynamicText.textContent = "";
    quoteAuthor.textContent = "";
    quoteIcon.style.opacity = 0;
  }

  function loopQuotes() {
    dynamicText.textContent = values[0].quote;
    quoteAuthor.textContent = values[0].philosophy;
    quoteIcon.scr = iconMap[values[0].icon];
    quoteIcon.style.opacity = 1;
    quoteInterval = setInterval(() => {
      // Reset previous h2 color
      headerMap.forEach((value) => {
        value.classList.remove("highlighted-value");
      });

      const value = values[quoteIndex];
      dynamicText.textContent = value.quote;
      quoteAuthor.textContent = value.philosophy;
      quoteIcon.style.opacity = 1;
      quoteIcon.src = iconMap[value.icon];
      headerMap.get(value.id).classList.add("highlighted-value");

      previousQuoteIndex = quoteIndex;
      quoteIndex = (quoteIndex + 1) % values.length;
    }, 4000);
  }

  let animationFrameIds = [];

  function animateLineFill(line, duration = 1000) {
    return new Promise((resolve) => {
      let startTime;

      function step(timestamp) {
        if (!startTime) startTime = timestamp;
        const elapsed = timestamp - startTime;
        const progress = Math.min(elapsed / duration, 1);
        line.style.background = `linear-gradient(to right, yellow ${progress * 100}%, white ${progress * 100}%)`;
        line.style.backgroundClip = "text";

        if (progress < 1) {
          const id = requestAnimationFrame(step);
          animationFrameIds.push(id);
        } else {
          resolve();
        }
      }

      const id = requestAnimationFrame(step);
      animationFrameIds.push(id);
    });
  }

  function animateBoxFlush() {
    return new Promise((resolve) => {
      let startTime;
      const duration = 2000;
      lines.forEach((line) => {
        line.classList.remove("title-fill");
        line.style.background = "";
      });
      function step(timestamp) {
        if (playing == false) resolve();
        if (!startTime) startTime = timestamp;
        const elapsed = timestamp - startTime;
        const progress = Math.min(elapsed / duration, 1);
        title.style.background = `linear-gradient(45deg, yellow ${(1 - progress) * 100}%, white ${(1 - progress) * 100}%)`;
        title.style.backgroundClip = "text";

        if (progress < 1) {
          const id = requestAnimationFrame(step);
          animationFrameIds.push(id);
        } else {
          title.classList.add("flush-fill");
          resolve();
        }
      }

      const id = requestAnimationFrame(step);
      animationFrameIds.push(id);
    });
  }

  async function animateExclamation() {
    return new Promise((resolve) => {
      if (playing == false) resolve();
      flushHandle.classList.add("shake-animation");
      setTimeout(() => {
        flushHandle.classList.remove("shake-animation");
        resolve();
      }, 1000);
    });
  }

  async function animateFlushHandle() {
    return new Promise((resolve) => {
      if (playing == false) resolve();
      cubeBox.classList.add("cube-flushed");
      setTimeout(() => {
        cubeBox.classList.remove("cube-flushed");
        resolve();
      }, 2000);
    });
  }

  async function animateTitleLines(
    lines,
    durationPerLine = 1000,
    delayBetween = 200,
  ) {
    for (let i = 0; i < lines.length; i++) {
      await animateLineFill(lines[i], durationPerLine);
      await new Promise((res) => setTimeout(res, delayBetween));
    }
    await animateExclamation();
    animateFlushHandle();
    await animateBoxFlush();
    await stopAnimation();
    loopQuotes();
  }

  function stopAnimation() {
    animationFrameIds.forEach((id) => cancelAnimationFrame(id));
    animationFrameIds = [];
    lines.forEach((line) => {
      line.style.background = "";
    });
  }

  playButton.addEventListener("click", () => {
    clearInterval(quoteInterval);
    if (playing == true) {
      playing = false;
      stopAnimation();
      loopQuotes();
    } else {
      resetUI();
      playing = true;
      animateTitleLines(lines);
    }
  });

  // Start looping quotes initially
  loopQuotes();
</script>
