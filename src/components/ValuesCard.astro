---
import quotes from "../content/values.json";
import flag from "../assets/icons/JP.svg";
import type { ImageMetadata } from "astro";

const iconMap: Record<string, string> = {};

// Load all icons (lazy importers)
const importers = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/icons/*.{png,svg}",
  { eager: false },
);
// Preload all modules upfront using Promise.all with top-level await
const modules = await Promise.all(
  quotes.map((quote) => {
    const key = `/src/assets/icons/${quote.icon}.svg`;
    const importer = importers[key];
    if (!importer) {
      console.warn(`Icon not found for ${quote.icon}, using fallback.`);
      return null;
    }
    return importer();
  }),
);
// Map company icons to default image metadata
modules.forEach((mod, i) => {
  if (mod) {
    iconMap[quotes[i].icon] = mod.default.src;
  }
});
---

<section id="values" class="section values">
  <div class="container container-border">
    <h2 class="section-title gradient-text">Values</h2>
    <div class="quote-card-container">
      <div class="quote-card" id="quoteCard">
        <div class="quote-icon">
          <svg
            width="32"
            height="32"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h4v10h-10z"
              fill="currentColor"></path>
          </svg>
        </div>
        <div class="quote-content" id="quoteContent">
          <blockquote class="quote-text" id="quoteText">
            {quotes[0].quote}
          </blockquote>
          <div class="quote-attribution">
            <cite class="quote-author" id="quoteAuthor">
              {quotes[0].philosophy}
            </cite>
            <img
              class="quote-origin"
              id="quoteIcon"
              src={iconMap[quotes[0].icon]}
              alt={quotes[0].icon}
              loading="lazy"
            />
          </div>
        </div>

        <div class="quote-controls">
          <div class="quote-indicators" id="quoteIndicators">
            {
              quotes.map((_, index) => (
                <button
                  class={`indicator ${index === 0 ? "active" : ""}`}
                  data-index={index}
                  aria-label={`Go to quote ${index + 1}`}
                />
              ))
            }
          </div>
          <button class="next-button" id="nextButton" aria-label="Next quote">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M9 18l6-6-6-6"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .values {
    background: rgba(0, 0, 0, 0.3);
  }

  .quote-card-container {
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 1000px;
    padding: 2rem;
    margin: 0 auto;
  }

  .quote-card {
    background: rgba(30, 30, 30, 0.364);
    backdrop-filter: blur(20px);
    border-radius: 24px;
    padding: 3rem;
    width: 100%;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    position: relative;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
  }

  .quote-icon {
    color: #ededed;
    margin-bottom: 1.5rem;
    opacity: 0.8;
  }

  .quote-content {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    min-height: 100px;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .quote-text {
    font-size: 1.25rem;
    line-height: 1.2;
    color: #dfdfdf;
    margin: 0 0 2rem 0;
    font-weight: 500;
    font-style: italic;
    letter-spacing: -0.01em;
  }

  .quote-attribution {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: center;
    gap: 0.5rem;
  }

  .quote-author {
    font-size: 1.1rem;
    font-weight: 600;
    color: #b0b0b0;
    font-style: normal;
  }

  .quote-origin {
    height: 20px;
    align-self: center;
    opacity: 0.7;
  }

  .quote-role {
    font-size: 0.9rem;
    color: #6b7280;
    font-weight: 400;
  }

  .quote-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  .quote-indicators {
    display: flex;
    gap: 0.75rem;
    padding: 4px;
  }

  .indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: none;
    background: rgba(102, 126, 234, 0.3);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .indicator:hover {
    background: rgba(102, 126, 234, 0.5);
    transform: scale(1.2);
  }

  .indicator.active {
    background: #667eea;
    transform: scale(1.3);
  }

  .indicator.active::after {
    content: "";
    position: absolute;
    top: -4px;
    left: -4px;
    right: -4px;
    bottom: -4px;
    border: 2px solid rgba(102, 126, 234, 0.3);
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  .next-button {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .next-button:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }

  .next-button:active {
    transform: scale(0.95);
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.5;
      transform: scale(1.1);
    }
  }

  @media (max-width: 768px) {
    .quote-card-container {
      padding: 1rem;
    }

    .quote-card {
      padding: 2rem;
      margin: 1rem;
    }

    .quote-text {
      font-size: 1.25rem;
      line-height: 1.5;
    }

    .quote-content {
      min-height: 160px;
    }

    .quote-controls {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
      grid-template-columns: 1fr;
    }

    .next-button {
      width: 44px;
      height: 44px;
    }
  }

  @media (max-width: 480px) {
    .quote-card {
      padding: 1.5rem;
    }

    .quote-text {
      font-size: 1.1rem;
    }

    .quote-content {
      min-height: 140px;
    }
  }
</style>

<script define:vars={{ quotes, iconMap }}>
  class QuoteCard {
    constructor() {
      this.quotes = quotes;
      this.icons = iconMap;
      this.currentIndex = 0;
      this.isTransitioning = false;
      this.autoPlayInterval = null;
      this.autoPlayDelay = 4000; // 4 seconds

      this.elements = {
        card: document.getElementById("quoteCard"),
        content: document.getElementById("quoteContent"),
        icon: document.getElementById("quoteIcon"),
        text: document.getElementById("quoteText"),
        author: document.getElementById("quoteAuthor"),
        role: document.getElementById("quoteRole"),
        indicators: document.getElementById("quoteIndicators"),
        nextButton: document.getElementById("nextButton"),
      };

      this.init();
    }

    init() {
      this.setupEventListeners();
      this.startAutoPlay();
    }

    setupEventListeners() {
      // Next button click
      this.elements.nextButton.addEventListener("click", () => {
        this.nextQuote();
      });

      // Indicator clicks
      this.elements.indicators.addEventListener("click", (e) => {
        if (e.target.classList.contains("indicator")) {
          const index = parseInt(e.target.dataset.index);
          this.goToQuote(index);
        }
      });

      // Pause auto-play on hover
      this.elements.card.addEventListener("mouseenter", () => {
        this.pauseAutoPlay();
      });

      // Resume auto-play when not hovering
      this.elements.card.addEventListener("mouseleave", () => {
        this.startAutoPlay();
      });

      // Pause auto-play on focus (accessibility)
      this.elements.card.addEventListener("focusin", () => {
        this.pauseAutoPlay();
      });

      this.elements.card.addEventListener("focusout", () => {
        this.startAutoPlay();
      });
    }

    async transitionQuote(newIndex) {
      if (this.isTransitioning || newIndex === this.currentIndex) return;

      this.isTransitioning = true;

      // Blur out current content
      this.elements.content.style.filter = "blur(6px)";
      this.elements.content.style.opacity = "0.3";

      // Wait for blur transition
      await new Promise((resolve) => setTimeout(resolve, 250));

      // Update content
      const quote = this.quotes[newIndex];
      this.elements.text.textContent = quote.quote;
      this.elements.author.textContent = quote.philosophy;
      this.elements.icon.src = iconMap[quote.icon];

      // Update indicators
      this.updateIndicators(newIndex);

      // Blur in new content
      this.elements.content.style.filter = "blur(0px)";
      this.elements.content.style.opacity = "1";

      this.currentIndex = newIndex;

      // Wait for blur-in transition to complete
      await new Promise((resolve) => setTimeout(resolve, 200));

      this.isTransitioning = false;
    }

    updateIndicators(activeIndex) {
      const indicators =
        this.elements.indicators.querySelectorAll(".indicator");
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle("active", index === activeIndex);
      });
    }

    nextQuote() {
      const nextIndex = (this.currentIndex + 1) % this.quotes.length;
      this.goToQuote(nextIndex);
    }

    goToQuote(index) {
      this.transitionQuote(index);
      this.resetAutoPlay();
    }

    startAutoPlay() {
      this.pauseAutoPlay();
      this.autoPlayInterval = setInterval(() => {
        this.nextQuote();
      }, this.autoPlayDelay);
    }

    pauseAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }

    resetAutoPlay() {
      this.startAutoPlay();
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new QuoteCard();
    });
  } else {
    new QuoteCard();
  }
</script>
